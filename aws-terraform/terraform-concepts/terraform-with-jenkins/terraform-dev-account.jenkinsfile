pipeline {
    agent {
       label 'master'
    }
    environment {
        DOCKER_HUB_REGISTRY = "leonardtia/${params.APPLICATION_NAME}"
        ECR_REPOSITORY_URI = "${params.AWS_ACCOUNT_NUMBER}.dkr.ecr.${params.AWS_REGION}.amazonaws.com"
        ECR_REPOSITORY_NAME = "development"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        skipDefaultCheckout(true)
        disableConcurrentBuilds()
        timeout (time: 10, unit: 'MINUTES')
        timestamps()
    }
    parameters {
        string (name: 'BRANCH_NAME', defaultValue: 'dev', description: '')
        string(name: 'AWS_ACCOUNT_NUMBER', defaultValue: '064137398917', description: '')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: '')
        
        choice(name: 'AWS', choices: [
            '',
            'vpc',
            's3-backend',
            'eks-control-plane',
            'eks-blue-green-node-group',
            'eks-node-group',
            'eks-namespaces',
        ], description: 'Select AWS resource')
        
        choice(name: 'AZURE', choices: [
            '',
            'del-dev-vpc',
            'del-prod-vpc',
        ], description: 'Select Azure resource')

        choice(name: 'ClOUD_PROVIDER', choices: [
            '',
            'AWS',
            'AZURE',
            'GOOGLE',
        ], description: 'Select the Cloud Where you want to deploy the resource')

        booleanParam (name: 'INIT', defaultValue: false, description: '')
        booleanParam (name: 'PLAN', defaultValue: false, description: '')
        booleanParam (name: 'APPLY', defaultValue: false, description: '')
        booleanParam (name: 'PLAN_DESTROY', defaultValue: false, description: '')
        booleanParam (name: 'DESTROY', defaultValue: false, description: '')
    }
    stages {
        stage ('Checkout') {
            steps {
                dir("${WORKSPACE}/code") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${env.BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                        url: 'https://github.com/devopstia/pipelines.git',
                        credentialsId: 'github-credentials'
                        ]]
                    ])
                }
            }
        }
        stage ('Sanity Check') {
            steps {
                script {
                   sh """
                   ls -l /home
                   """
                }
            }
        }
        stage('Getting AWS Credentials') {
            steps {
                script {
                   def awsCredentialsId = 'aws-access'
                   withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: awsCredentialsId,
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        aws_credentials()
                   } 
                }
            }
        }
        stage('Deploying AWS Cloud') {
            when {
                expression { params.ClOUD_PROVIDER == 'AWS' }
            }
            steps {
                script {
                   println('::==================================Deploying AWS Cloud============================================::') 
                }
            }
        }
        stage('Deploying Azure Cloud') {
            when {
                expression { params.ClOUD_PROVIDER == 'AZURE' }
            }
            steps {
                script {
                   println('::==================================Deploying Azure Cloud============================================::') 
                }
            }
        }
        stage('Deploying GOOGLE Cloud') {
            when {
                expression { params.ClOUD_PROVIDER == 'GOOGLE' }
            }
            steps {
                script {
                   println('::==================================Deploying GOOGLE Cloud============================================::') 
                }
            }
        }
        stage('Terraform Init') {
            when {
                expression { params.INIT == true }
            }
            steps {
                script {
                    aws_resources()
                }
            }
        }
        stage('Terraform Plan') {
            when {
                expression { params.PLAN == true }
            }
            steps {
                script {
                    aws_resources()
                }
            }
        }
        stage('Terraform Apply') {
            when {
                expression { params.APPLY == true }
            }
            steps {
                script {
                    aws_resources()
                }
            }
        }
        stage('Terraform Plan Destroy') {
            when {
                expression { params.PLAN_DESTROY == true }
            }
            steps {
                script {
                    aws_resources()
                }
            }
        }
        stage('Terraform Destroy') {
            when {
                expression { params.DESTROY == true }
            }
            steps {
                script {
                    aws_resources()
                }
            }
        }
        stage('Clean Up') {
            steps {
                script {
                    sh """
                    cd ~/
                    rm -rf .aws  || true
                    cd "${WORKSPACE}/code" && rm -rf *
                    """
                }
            }
        }
    }
}


def aws_credentials() {
sh """    
mkdir -p ~/.aws || true

cat <<EOF > ~/.aws/credentials
[default]
aws_access_key_id = ${AWS_ACCESS_KEY_ID}
aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
EOF

cat <<EOF > ~/.aws/config
[default]
region = ${params.AWS_REGION}
output = json
EOF

cat ~/.aws/credentials
aws s3 ls
terraform --version
"""
}

def aws_resources() {
    //vpc
    if (params.AWS == 'vpc' && params.INIT == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        exit 0
        """
    } 
    else if (params.AWS == 'vpc' && params.PLAN == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan
        exit 0
        """
    } 
    else if (params.AWS == 'vpc' && params.APPLY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform apply -auto-approve
        exit 0
        """
    } 
    else if (params.AWS == 'vpc' && params.PLAN_DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan -destroy
        exit 0
        """
    } 
    else if (params.AWS == 'vpc' && params.DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform destroy -auto-approve
        exit 0
        """
    } 
    //eks-control-plane
    // ---------------------------------------------------------------------------

    if (params.AWS == 'eks-control-plane' && params.INIT == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        exit 0
        """
    } 
    else if (params.AWS == 'eks-control-plane' && params.PLAN == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan
        exit 0
        """
    } 
    else if (params.AWS == 'eks-control-plane' && params.APPLY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform apply -auto-approve
        exit 0
        """
    } 
    else if (params.AWS == 'eks-control-plane' && params.PLAN_DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan -destroy
        exit 0
        """
    } 
    else if (params.AWS == 'eks-control-plane' && params.DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform destroy -auto-approve
        exit 0
        """
    } 

    //eks-blue-green-node-group
    // ---------------------------------------------------------------------------

    if (params.AWS == 'eks-blue-green-node-group' && params.INIT == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        exit 0
        """
    } 
    else if (params.AWS == 'eks-blue-green-node-group' && params.PLAN == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan
        exit 0
        """
    } 
    else if (params.AWS == 'eks-blue-green-node-group' && params.APPLY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform apply -auto-approve
        exit 0
        """
    } 
    else if (params.AWS == 'eks-blue-green-node-group' && params.PLAN_DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan -destroy
        exit 0
        """
    } 
    else if (params.AWS == 'eks-blue-green-node-group' && params.DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform destroy -auto-approve
        exit 0
        """
    } 
    //eks-node-group
    // ---------------------------------------------------------------------------

    if (params.AWS == 'eks-node-group' && params.INIT == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        exit 0
        """
    } 
    else if (params.AWS == 'eks-node-group' && params.PLAN == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan
        exit 0
        """
    } 
    else if (params.AWS == 'eks-node-group' && params.APPLY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform apply -auto-approve
        exit 0
        """
    } 
    else if (params.AWS == 'eks-node-group' && params.PLAN_DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan -destroy
        exit 0
        """
    } 
    else if (params.AWS == 'eks-node-group' && params.DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform destroy -auto-approve
        exit 0
        """
    } 

    //eks-namespaces
    // ---------------------------------------------------------------------------

    if (params.AWS == 'eks-namespaces' && params.INIT == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        exit 0
        """
    } 
    else if (params.AWS == 'eks-namespaces' && params.PLAN == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan
        exit 0
        """
    } 
    else if (params.AWS == 'eks-namespaces' && params.APPLY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform apply -auto-approve
        exit 0
        """
    } 
    else if (params.AWS == 'eks-namespaces' && params.PLAN_DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan -destroy
        exit 0
        """
    } 
    else if (params.AWS == 'eks-namespaces' && params.DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform destroy -auto-approve
        exit 0
        """
    } 

     //s3-backend
    // ---------------------------------------------------------------------------

    else if (params.AWS == 's3-backend' && params.INIT == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        exit 0
        """
    } 
    else if (params.AWS == 's3-backend' && params.PLAN == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan
        exit 0
        """
    } 
    else if (params.AWS == 's3-backend' && params.APPLY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform apply -auto-approve
        exit 0
        """
    } 
    else if (params.AWS == 's3-backend' && params.PLAN_DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform plan -destroy
        exit 0
        """
    } 
    else if (params.AWS == 's3-backend' && params.DESTROY == true) {
        sh """
        cd "${WORKSPACE}/code/terraform/aws-terraform/resources/dev/"${params.AWS}
        terraform init
        terraform destroy -auto-approve
        exit 0
        """
    } 
    else {
        sh """
        echo 'WRONG RESOURCE. PLEASE CHECK----------------------------------------'
        exit 0
        """
    }  
}
